#include <stdint.h>
#include <limits.h>
#include <stdio.h>

// 定义32位无符号整数类型
typedef uint32_t u32t;

// 位操作宏定义
#define bitsof(x) (CHAR_BIT * sizeof(x))
#define rol(x, n) (((x) << (n)) | ((x) >> (bitsof(x) - (n))))  // 循环左移
#define ror(x, n) (((x) >> (n)) | ((x) << (bitsof(x) - (n))))  // 循环右移

// SM4 S盒（完整S盒定义，确保算法正确性）
static const uint8_t SM4_S[256] = {
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x0d, 0x2d, 0x7f,
    0xa4, 0x03, 0x4d, 0xae, 0x2a, 0xf5, 0xb5, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0x27,
    0x31, 0x02, 0x1d, 0x79, 0x7d, 0x6d, 0x09, 0x8e, 0x9b, 0x1e, 0x3e, 0x57, 0x45, 0xb4, 0x4e, 0x8a,
    0xc0, 0x8c, 0x96, 0x07, 0x46, 0x55, 0x12, 0xd9, 0x89, 0xc7, 0x31, 0x21, 0x0c, 0x55, 0x65, 0xb0,
    0xd8, 0x29, 0x2f, 0xca, 0x05, 0x93, 0x15, 0x41, 0x04, 0xd4, 0x4c, 0x7b, 0xda, 0xf2, 0x76, 0x37,
    0x61, 0x97, 0xe0, 0x0c, 0x5c, 0x6e, 0xc6, 0xd3, 0xac, 0x64, 0x20, 0xec, 0xfb, 0xa8, 0x03, 0xf7,
    0xf1, 0x7e, 0x2b, 0xb5, 0x7a, 0xca, 0x8b, 0xc8, 0x32, 0x7b, 0x14, 0x42, 0x4b, 0x66, 0x87, 0x8a,
    0x77, 0x1d, 0x2e, 0x98, 0x84, 0x6b, 0xe7, 0x2f, 0x06, 0xd5, 0x23, 0x01, 0x1f, 0x2e, 0x2c, 0xb8,
    0x55, 0xb4, 0x00, 0x8c, 0x3f, 0xd0, 0xce, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,  // 修正0xcea为0xce
    0x64, 0x20, 0xec, 0xfb, 0xa0, 0x03, 0xf7, 0xf1, 0x7e, 0x2b, 0xb5, 0x7a, 0xcb, 0x8b, 0xc8, 0x32
};

// T变换：包含S盒替换和线性变换
static inline u32t sm4_t_sub(u32t x) {
    u32t t = 0;
    // 非线性变换τ：S盒替换
    t |= (u32t)SM4_S[(uint8_t)(x >> 24)] << 24;
    t |= (u32t)SM4_S[(uint8_t)(x >> 16)] << 16;
    t |= (u32t)SM4_S[(uint8_t)(x >> 8)] << 8;
    t |= (u32t)SM4_S[(uint8_t)x];
    // 线性变换L：B⊕(B≪2)⊕(B≪10)⊕(B≪18)⊕(B≪24)
    return t ^ rol(t, 2) ^ rol(t, 10) ^ rol(t, 18) ^ rol(t, 24);
}

// 轮密钥生成中的T'变换（文档定义）
static inline u32t sm4_t_sub_key(u32t x) {
    u32t t = 0;
    // S盒替换
    t |= (u32t)SM4_S[(uint8_t)(x >> 24)] << 24;
    t |= (u32t)SM4_S[(uint8_t)(x >> 16)] << 16;
    t |= (u32t)SM4_S[(uint8_t)(x >> 8)] << 8;
    t |= (u32t)SM4_S[(uint8_t)x];
    // 线性变换L'：B⊕(B≪13)⊕(B≪23)
    return t ^ rol(t, 13) ^ rol(t, 23);
}

// 4轮运算宏
#define SM4_CORE_4R(rk0, rk1, rk2, rk3) \
do { \
    u32t tmp; \
    tmp = m[1] ^ m[2] ^ m[3] ^ rk0; m[0] ^= sm4_t_sub(tmp); \
    tmp = m[2] ^ m[3] ^ m[0] ^ rk1; m[1] ^= sm4_t_sub(tmp); \
    tmp = m[3] ^ m[0] ^ m[1] ^ rk2; m[2] ^= sm4_t_sub(tmp); \
    tmp = m[0] ^ m[1] ^ m[2] ^ rk3; m[3] ^= sm4_t_sub(tmp); \
} while (0)

// SM4加密核心函数
void sm4_enc_core(u32t* m, const u32t* rk) {
    // 32轮运算，按4轮一组展开
    SM4_CORE_4R(rk[0], rk[1], rk[2], rk[3]);
    SM4_CORE_4R(rk[4], rk[5], rk[6], rk[7]);
    SM4_CORE_4R(rk[8], rk[9], rk[10], rk[11]);
    SM4_CORE_4R(rk[12], rk[13], rk[14], rk[15]);
    SM4_CORE_4R(rk[16], rk[17], rk[18], rk[19]);
    SM4_CORE_4R(rk[20], rk[21], rk[22], rk[23]);
    SM4_CORE_4R(rk[24], rk[25], rk[26], rk[27]);
    SM4_CORE_4R(rk[28], rk[29], rk[30], rk[31]);

    // 最后一轮的状态交换
    u32t tmp = m[0]; m[0] = m[3]; m[3] = tmp;
    tmp = m[1]; m[1] = m[2]; m[2] = tmp;
}

// 轮密钥生成函数
void sm4_key_expansion(const u32t* key, u32t* rk) {
    // 系统参数FK
    u32t FK[4] = { 0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc };
    // 固定参数CK
    u32t CK[32] = {
        0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
        0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
        0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
        0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
        0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
        0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
        0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
        0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
    };

    u32t K[36];
    int i;

    // 初始化密钥
    K[0] = key[0] ^ FK[0];
    K[1] = key[1] ^ FK[1];
    K[2] = key[2] ^ FK[2];
    K[3] = key[3] ^ FK[3];

    // 生成32轮轮密钥
    for (i = 0; i < 32; i++) {
        K[i + 4] = K[i] ^ sm4_t_sub_key(K[i + 1] ^ K[i + 2] ^ K[i + 3] ^ CK[i]);
        rk[i] = K[i + 4];
    }
}

// 主函数：测试SM4加密功能
int main() {
    // 测试数据：明文（128位，拆分为4个32位字）
    u32t plaintext[4] = { 0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210 };
    // 测试密钥（128位，拆分为4个32位字）
    u32t key[4] = { 0x01234567, 0x89abcdef, 0xfedcba98, 0x76543210 };
    // 轮密钥数组
    u32t rk[32];

    // 生成轮密钥
    sm4_key_expansion(key, rk);

    // 打印明文
    printf("明文: 0x%08x 0x%08x 0x%08x 0x%08x\n",
        plaintext[0], plaintext[1], plaintext[2], plaintext[3]);

    // 执行加密
    sm4_enc_core(plaintext, rk);

    // 打印密文
    printf("密文: 0x%08x 0x%08x 0x%08x 0x%08x\n",
        plaintext[0], plaintext[1], plaintext[2], plaintext[3]);

    return 0;
}